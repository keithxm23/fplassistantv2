  <div class="row">
    <div class="col-lg-12">
      <h1>Player <small>Grid</small></h1>
      <!--
      <div class="alert alert-dismissable alert-warning">
        <button data-dismiss="alert" class="close" type="button">Ã—</button>
        <h4>Warning!</h4>
        <p>You have two new messages.
        </p>
      </div>
      -->
    </div>
  </div>

<div class="row">
  <div class="col-lg-12">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-group"></i> Player Grid</h3>
      </div>
      <div class="panel-body">

        <div id="gridContainer">
          <table id="filterGrid">
            <tr>
              <td></td>
            </tr>
          </table>
          <div id="pager"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="row">

  <div class="col-lg-6">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-ambulance"></i> Injuries</h3>
      </div>
      <div class="panel-body">

        <div style="width:460; text-align:center; font-family:Verdana; font-size:11px;">
          <iframe src="http://www.physioroom.com/affiliate/common/syndicate_table2.php?w=470" width="460" height="1200" frameborder="0"></iframe>
          <p>Visit <a href="http://www.physioroom.com" rel="nofollow" target="_blank">PhysioRoom.com</a> for more injury information</p>
        </div>

      </div>
    </div>
  </div>

  <div class="col-lg-6">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-trophy"></i> Standings</h3>
      </div>
      <div class="panel-body">

        Fill

      </div>
    </div>
  </div>

  <div class="col-lg-6">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-calendar"></i> Upcoming Gameweek</h3>
      </div>
      <div class="panel-body">

        Fill

      </div>
    </div>
  </div>

</div>

<div class="row">



  <div class="col-lg-6">
  </div>

</div>




<% content_for :css do %>
  <style>
    .ui-pg-input {width: auto !important; }
    .ui-jqgrid tr.jqgrow td {font-size:1.0em}
    .ui-jqgrid tr.ui-search-toolbar td.ui-search-oper {font-size:0.6em;}
    .ui-jqgrid tr.ui-search-toolbar td.ui-search-input input {width: 30px !important;}
    #wrapper { padding-left: 125px;}
    .side-nav { width: 125px; }
    #gs_next_fixture {width: auto !important;}
    #gs_current_fixture {width: auto !important;}
    #gs_summary {width: auto !important;}
    #gs_first_name  {width: auto !important;}
    #gs_second_name  {width: auto !important;}
    #gs_web_name  {width: auto !important;}
    #gs_news  {width: auto !important;}
    .searchFilter input {width:50px !important;}
    .ui-pg-selbox {
      width: auto !important;
      padding: 0 !important;
    }
    input{background-color: black;}
    .searchFilter select, input {
      width: auto !important;
    }
    .short_team_name{
      -webkit-border-radius: 99px;
      -moz-border-radius: 99px;
      border-radius: 99px;
      font-weight: bold;
    }

    .next_team{
      display:inline-block;
      font-weight: bold;
      -webkit-border-radius: 99px 0px 0px 99px;
      -moz-border-radius: 99px 0px 0px 99px;
      border-radius: 99px 0px 0px 99px;
      width: 30px;
      margin-left: 5px;
    }

    .next_at{
      display:inline-block;
      font-weight: bold;
      -webkit-border-radius: 0px 99px 99px 0px;
      -moz-border-radius: 0px 99px 99px 0px;
      border-radius: 0px 99px 99px 0px;
      width: 13px;
    }

    .A{
      background-color:#8b0000;
    }
    .H{
      background-color:#517a00;
    }

    .ARS{
      background-color:#c42222;
    }
    .MUN{
      background-color:#aa0619;
      color:#f1d00e;
    }
    .CRY{
      background-color:#5971b9;
    }
    .TOT{
      background-color:#f5f5f5;
      color:#10214a;
    }
    .EVE{
      background-color:#0031a1;
      color:#f1d00e;
    }
    .LEI{
      background-color:#023b9d;
    }


    .ui-jqgrid tr.jqgrow td { height: 10px; padding-top: 0px;}
  </style>
  <link rel="stylesheet" type="text/css" href="http://www.ok-soft-gmbh.com/jqGrid/jquery.jqGrid-4.3.1/plugin/ui.multiselect.css" />
<% end %>

<% content_for :js do %>
  <script type="text/javascript">
    var short_teamname = {
      "Arsenal":"ARS",
      "Crystal Palace":"CRY",
      "Everton":"EVE",
      "Leicester":"LEI",
      "Spurs":"TOT",
      "Southampton":"SOU",
      "Chelsea":"CHE",
      "Man City":"MCI",
      "Man Utd":"MUN",
      "Liverpool":"LIV",
      "Swansea":"SWA",
      "Newcastle":"NEW",
      "QPR":"QPR",
      "Stoke":"STK",
      "Sunderland":"SUN",
      "West Ham":"WHU",
      "Aston Villa":"AVL",
      "West Brom":"WBA",
      "Burnley":"BUR",
      "Hull":"HUL"
    };

  $.jgrid.extend({
    columnChooser : function(opts) {
        var self = this;
        if($("#colchooser_"+$.jgrid.jqID(self[0].p.id)).length ) { return; }
        var selector = $('<div id="colchooser_'+self[0].p.id+'" style="position:relative;overflow:hidden"><div><select multiple="multiple"></select></div></div>');
        var select = $('select', selector);

        function insert(perm,i,v) {
            if(i>=0){
                var a = perm.slice();
                var b = a.splice(i,Math.max(perm.length-i,i));
                if(i>perm.length) { i = perm.length; }
                a[i] = v;
                return a.concat(b);
            }
        }
        opts = $.extend({
            "width" : 420,
            "height" : 240,
            "classname" : null,
            "done" : function(perm) { if (perm) { self.jqGrid("remapColumns", perm, true); } },
            /* msel is either the name of a ui widget class that
               extends a multiselect, or a function that supports
               creating a multiselect object (with no argument,
               or when passed an object), and destroying it (when
               passed the string "destroy"). */
            "msel" : "multiselect",
            /* "msel_opts" : {}, */

            /* dlog is either the name of a ui widget class that
               behaves in a dialog-like way, or a function, that
               supports creating a dialog (when passed dlog_opts)
               or destroying a dialog (when passed the string
               "destroy")
               */
            "dlog" : "dialog",

            /* dlog_opts is either an option object to be passed
               to "dlog", or (more likely) a function that creates
               the options object.
               The default produces a suitable options object for
               ui.dialog */
            "dlog_opts" : function(opts) {
                var buttons = {};
                buttons[opts.bSubmit] = function() {
                    opts.apply_perm();
                    opts.cleanup(false);
                };
                buttons[opts.bCancel] = function() {
                    opts.cleanup(true);
                };
                return $.extend(true, {
                    "buttons": buttons,
                    "close": function() {
                        opts.cleanup(true);
                    },
                    "modal" : opts.modal ? opts.modal : false,
                    "resizable": opts.resizable ? opts.resizable : true,
                    "width": opts.width+20,
                    resize: function (e, ui) {
                        var $container = $(this).find('>div>div.ui-multiselect'),
                            containerWidth = $container.width(),
                            containerHeight = $container.height(),
                            $selectedContainer = $container.find('>div.selected'),
                            $availableContainer = $container.find('>div.available'),
                            $selectedActions = $selectedContainer.find('>div.actions'),
                            $availableActions = $availableContainer.find('>div.actions'),
                            $selectedList = $selectedContainer.find('>ul.connected-list'),
                            $availableList = $availableContainer.find('>ul.connected-list'),
                            dividerLocation = opts.msel_opts.dividerLocation || $.ui.multiselect.defaults.dividerLocation;

                        $container.width(containerWidth); // to fix width like 398.96px
                        $availableContainer.width(Math.floor(containerWidth*(1-dividerLocation)));
                        $selectedContainer.width(containerWidth - $availableContainer.outerWidth() - ($.browser.webkit ? 1: 0));

                        $availableContainer.height(containerHeight);
                        $selectedContainer.height(containerHeight);
                        $selectedList.height(Math.max(containerHeight-$selectedActions.outerHeight()-1,1));
                        $availableList.height(Math.max(containerHeight-$availableActions.outerHeight()-1,1));
                    }
                }, opts.dialog_opts || {});
            },
            /* Function to get the permutation array, and pass it to the
               "done" function */
            "apply_perm" : function() {
                $('option',select).each(function(i) {
                    if (this.selected) {
                        self.jqGrid("showCol", colModel[this.value].name);
                    } else {
                        self.jqGrid("hideCol", colModel[this.value].name);
                    }
                });

                var perm = [];
                //fixedCols.slice(0);
                $('option:selected',select).each(function() { perm.push(parseInt(this.value,10)); });
                $.each(perm, function() { delete colMap[colModel[parseInt(this,10)].name]; });
                $.each(colMap, function() {
                    var ti = parseInt(this,10);
                    perm = insert(perm,ti,ti);
                });
                if (opts.done) {
                    opts.done.call(self, perm);
                }
            },
            /* Function to cleanup the dialog, and select. Also calls the
               done function with no permutation (to indicate that the
               columnChooser was aborted */
            "cleanup" : function(calldone) {
                call(opts.dlog, selector, 'destroy');
                call(opts.msel, select, 'destroy');
                selector.remove();
                if (calldone && opts.done) {
                    opts.done.call(self);
                }
            },
            "msel_opts" : {}
        }, $.jgrid.col, opts || {});
        if($.ui) {
            if ($.ui.multiselect ) {
                if(opts.msel == "multiselect") {
                    if(!$.jgrid._multiselect) {
                        // should be in language file
                        alert("Multiselect plugin loaded after jqGrid. Please load the plugin before the jqGrid!");
                        return;
                    }
                    opts.msel_opts = $.extend($.ui.multiselect.defaults,opts.msel_opts);
                }
            }
        }
        if (opts.caption) {
            selector.attr("title", opts.caption);
        }
        if (opts.classname) {
            selector.addClass(opts.classname);
            select.addClass(opts.classname);
        }
        if (opts.width) {
            $(">div",selector).css({"width": opts.width,"margin":"0 auto"});
            select.css("width", opts.width);
        }
        if (opts.height) {
            $(">div",selector).css("height", opts.height);
            select.css("height", opts.height - 10);
        }
        var colModel = self.jqGrid("getGridParam", "colModel");
        var colNames = self.jqGrid("getGridParam", "colNames");
        var colMap = {}, fixedCols = [];

        select.empty();
        $.each(colModel, function(i) {
            colMap[this.name] = i;
            if (this.hidedlg) {
                if (!this.hidden) {
                    fixedCols.push(i);
                }
                return;
            }

            select.append("<option value='"+i+"' "+
                          (this.hidden?"":"selected='selected'")+">"+colNames[i]+"</option>");
        });
        function call(fn, obj) {
            if (!fn) { return; }
            if (typeof fn == 'string') {
                if ($.fn[fn]) {
                    $.fn[fn].apply(obj, $.makeArray(arguments).slice(2));
                }
            } else if ($.isFunction(fn)) {
                fn.apply(obj, $.makeArray(arguments).slice(2));
            }
        }

        var dopts = $.isFunction(opts.dlog_opts) ? opts.dlog_opts.call(self, opts) : opts.dlog_opts;
        call(opts.dlog, selector, dopts);
        var mopts = $.isFunction(opts.msel_opts) ? opts.msel_opts.call(self, opts) : opts.msel_opts;
        call(opts.msel, select, mopts);
        // fix height of elements of the multiselect widget
        var resizeSel = "#colchooser_"+$.jgrid.jqID(self[0].p.id),
            $container = $(resizeSel + '>div>div.ui-multiselect'),
            $selectedContainer = $(resizeSel + '>div>div.ui-multiselect>div.selected'),
            $availableContainer = $(resizeSel + '>div>div.ui-multiselect>div.available'),
            containerHeight,
            $selectedActions = $selectedContainer.find('>div.actions'),
            $availableActions = $availableContainer.find('>div.actions'),
            $selectedList = $selectedContainer.find('>ul.connected-list'),
            $availableList = $availableContainer.find('>ul.connected-list');
        $container.height($container.parent().height()); // increase the container height
        containerHeight = $container.height();
        $selectedContainer.height(containerHeight);
        $availableContainer.height(containerHeight);
        $selectedList.height(Math.max(containerHeight-$selectedActions.outerHeight()-1,1));
        $availableList.height(Math.max(containerHeight-$availableActions.outerHeight()-1,1));
    }
});


  $(function () {
      numberSearchOptions = ['eq', 'ne', 'le', 'ge', 'nu', 'nn'],
      numberTemplate = {formatter: 'number', align: 'right', sorttype: 'float', width: 50,
                        searchoptions: { sopt: numberSearchOptions }},
      IntTemplate = {formatter: 'integer', align: 'right', sorttype: 'integer', width: 50,
                        searchoptions: { sopt: numberSearchOptions }},

      $("#filterGrid").jqGrid({
          url: "/players.json",
          datatype: "json",
          colNames: ["Picture", "Name", "First Name", "Last Name", "Position", "Team", "Status",
           "News", "&pound;", "F", "TS", "PPG", "TSB", "CF", "NF", "MP",
           "GS", "A","CS", "GC", "OG", "PS", "PM", "YC", "RC", "S", "B", "ESP",
           "BPS","Next 3 Fixtures"
          ],
          colModel: [
            { name: "photo", width: 50, align: 'center', formatter: playerPicFormatter, search: false, hidden:true},
            { name: "web_name", width: 100},
            { name: "first_name", hidden: true, width: 120},
            { name: "second_name", hidden: true, width: 120 },
            { name: "type_name", width: 50, align: 'center', formatter: playerPositionFormatter,
             stype:'select', edittype: 'select',
             searchoptions:{sopt:['eq','ne'], value:":All;Goalkeeper:GK;Defender:DEF;Midfielder:MID;Forward:FWD"},
             editoptions:{value:":All;Goalkeeper:GK;Defender:DEF;Midfielder:MID;Forward:FWD"}
            },
            { name: "team_name", width: 50, align: 'center', formatter: teamNameFormatter,
             stype:'select', edittype: 'select',
             searchoptions:{sopt:['eq','ne'], value:":All;Arsenal:Arsenal;Aston Villa:Aston Villa;Leicester:Leicester;Chelsea:Chelsea;Crystal Palace:Crystal Palace;Everton:Everton;QPR:QPR;Hull:Hull;Liverpool:Liverpool;Man City:Man City;Man Utd:Man Utd;Newcastle:Newcastle;Burnley:Burnley;Southampton:Southampton;Stoke:Stoke;Sunderland:Sunderland;Swansea:Swansea;Spurs:Spurs;West Brom:West Brom;West Ham:West Ham"},
             editoptions:{value:":All;Arsenal:Arsenal;Aston Villa:Aston Villa;Leicester:Leicester;Chelsea:Chelsea;Crystal Palace:Crystal Palace;Everton:Everton;QPR:QPR;Hull:Hull;Liverpool:Liverpool;Man City:Man City;Man Utd:Man Utd;Newcastle:Newcastle;Burnley:Burnley;Southampton:Southampton;Stoke:Stoke;Sunderland:Sunderland;Swansea:Swansea;Spurs:Spurs;West Brom:West Brom;West Ham:West Ham"}
            },
            { name: "status", width: 50, align: 'center', formatter: statusFormatter,
              stype:'select', edittype: 'select',
                    searchoptions:{sopt:['eq','ne'], value:":All;a:Avaliable;d:Maybe Injured;i:Injured;n:On Loan;s:Suspended"},
                    editoptions:{value:":All;a:Avaliable;d:Maybe Injured;i:Injured;n:On Loan;s:Suspended"},
                    cellattr: function (rowId, val, rawObject, cm, rdata) {
                      return 'title="' + rawObject.news  + '"';
                    }
            },
            { name: "news", hidden: true},
            { name: "now_cost_float", template: numberTemplate },
            { name: "form", template: numberTemplate, hidden: true, 'editrules': {edithidden: true}},
            { name: "total_points", template: IntTemplate },
            { name: "points_per_game", template: numberTemplate, hidden: true, 'editrules': {edithidden: true}},
            { name: "selected_by", template: numberTemplate, hidden:true},
            { name: "current_fixture", hidden: true},
            { name: "next_fixture", width:50, align:'center', formatter: nextFixtureFormatter, hidden:true },
            { name: "minutes", template: IntTemplate },
            { name: "goals_scored", template: IntTemplate },
            { name: "assists", template: IntTemplate },
            { name: "clean_sheets", template: IntTemplate, hidden:true },
            { name: "goals_conceded", template: IntTemplate, hidden:true },
            { name: "own_goals", template: IntTemplate, hidden:true },
            { name: "penalties_saved", template: IntTemplate, hidden:true },
            { name: "penalties_missed", template: IntTemplate, hidden:true },
            { name: "yellow_cards", template: IntTemplate, hidden:true },
            { name: "red_cards", template: IntTemplate, hidden:true },
            { name: "saves", template: IntTemplate, hidden:true },
            { name: "bonus", template: IntTemplate },
            { name: "ea_index", template: IntTemplate, hidden:true },
            { name: "bps", template: IntTemplate, hidden:true },
            { name: "summary", align:'center', width:150, formatter:summaryFormatter, search:false}
          ],
          toppager:true,
          rownumbers: true,
          height: 'auto',
          pager: "#pager",
          rowNum: 20,
          rowList: [10, 20, 30],
          sortname: "now_cost_float",
          sortorder: "desc",
          viewrecords: true,
          gridview: true,
          autoencode: true,
          loadonce: true,
          ignoreCase: true,
          sortable: true,
          searchOperators: true,
          /*
          onSelectRow: function (id) {
            $(this).jqGrid('viewGridRow', id, {caption: "Player Details"});
                },
*/
          caption: ""
      });
  jQuery("#filterGrid").jqGrid('filterToolbar',{searchOperators : true});

      //For docs on options set, refer: http://www.trirand.com/jqgridwiki/doku.php?id=wiki:singe_searching#options
      jQuery("#filterGrid").jqGrid('navGrid','#pager',{del:false,add:false,edit:false,cloneToTop:true, refreshtext:'Reset', searchtext:'Query'},{},{},{},{multipleSearch:true,
                                                                                                 width: 600,                                                                                          closeAfterSearch: true,
                                                                                                 top: 300,
                                                                                                 left: 100,
                                                                                                 searchOnEnter: true});

    //jQuery("#filterGrid").jqGrid('columnChooser',{modal: true});

    $.extend(true, $.ui.multiselect, {
    locale: {
        addAll: 'Make all visible',
        removeAll: 'Hide All',
        itemsCount: 'Avlialble Columns'
    }
});
$.extend(true, $.jgrid.col, {
    width: 470,
    modal: true,
    msel_opts: {dividerLocation: 0.5},
    dialog_opts: {
        minWidth: 470,
        show: 'fade',
        hide: 'fade'
    }
});

jQuery("#filterGrid").jqGrid('navButtonAdd', '#pager', {
    caption: "Show/hide columns",
    buttonicon: "ui-icon-calculator",
    title: "Choose columns",
    onClickButton: function () {
        $(this).jqGrid('columnChooser');
    }
});

jQuery("#filterGrid").jqGrid('navButtonAdd', '#filterGrid_toppager', {
    caption: "Show/hide columns",
    buttonicon: "ui-icon-calculator",
    title: "Choose columns",
    onClickButton: function () {
        $(this).jqGrid('columnChooser');
    }
});
    function playerPicFormatter(cellvalue, options, rowObject)
    {
      var html = "<img src='http://cdn.ismfg.net/static/plfpl/img/shirts/photos/"+cellvalue+"'/>";
      return html;
    }

    function statusFormatter(cellvalue, options, rowObject){
      var statuses = {"a":"<i style='color:#77b300' class='fa fa-thumbs-up'></i>","d":"<i style='color:#ff8800' class='fa fa-stethoscope'></i>","i":"<i style='color:#cc0000' class='fa fa-ambulance'></i>","n":"<i style='color:#cc0000' class='fa fa-suitcase'></i>","s":"<i style='color:#cc0000' class='fa fa-ban'></i>"};
      return statuses[cellvalue];
    }

    function nextFixtureFormatter(cellvalue, options, rowObject){
      var tmp = cellvalue.split(' (');
      var html = short_teamname[tmp[0]] + "-" + tmp[1][0];
      return html;
    }


    function teamNameFormatter(cellvalue, options, rowObject){
      var name = short_teamname[cellvalue];
      return "<div class='short_team_name "+name+"'>"+name+"</div>";
    }

    function playerPositionFormatter(cellvalue, options, rowObject){
      var position_short = {"Goalkeeper":"G", "Forward":"F", "Midfielder":"M", "Defender":"D"};
      return position_short[cellvalue];
    }

    function summaryFormatter(cellvalue, options, rowObject){
      var fixs = cellvalue.split(', ');
      var html = "<div style='overflow:auto; width:150px'>";
      for(i=0; i< fixs.length; i++){
        var fix = fixs[i].split('-');
        var tm = fix[0];
        var at = fix[1];

        html += "<div class='next_team "+tm+" '>"+tm+"</div>";
        html += "<div class='next_at "+at+" '>"+at+"</div>";
      }
      html += "</div>"
      return html;
    }

  });
  </script>
<% end %>
