<div class="row">
  <div class="col-lg-12">
    <h1>FPL <small>Assistant</small></h1>
    <!--
    <div class="alert alert-dismissable alert-warning">
      <button data-dismiss="alert" class="close" type="button">×</button>
      <h4>Warning!</h4>
      <p>You have two new messages.
      </p>
    </div>
    -->
  </div>
</div>

<!--
<div class="row">
  <div class="col-lg-5">
    <div class="alert alert-dismissable alert-info">
      <button type="button" class="close" data-dismiss="alert">×</button>
      Data last updated on: Thu Oct  2 09:20:33 EDT 2014
    </div>
  </div>
</div>
-->
<div class="row">
  <div class="col-lg-12">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-group"></i> All Players <span class="hideunhide"><i class="fa fa-compress"></i></span></h3>
      </div>
      <div class="panel-body">

        <div id="gridContainer">
          <table id="filterGrid">
            <tr>
              <td></td>
            </tr>
          </table>
          <div id="pager"></div>
        </div>
        <button id="getSelected" type="button" class="btn btn-primary">Shortlist Selected Players</button>
      </div>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-lg-12">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-star"></i> Player Shortlist <span class="hideunhide"><i class="fa fa-compress"></i></span></h3>
      </div>
      <div class="panel-body">

        <div id="gridContainer">
          <table id="shortlistGrid">
            <tr>
              <td></td>
            </tr>
          </table>
          <div id="shortlistGrid_pager"></div>
        </div>

        <button id="clearShortlist" type="button" class="btn btn-primary">Clear Shortlist</button>

      </div>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-lg-4">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-bar-chart-o"></i> Performance Stats <span class="hideunhide"><i class="fa fa-compress"></i></span></h3>
      </div>
      <div class="panel-body">

        <div id="container" style="min-width: 290px; max-width: 600px; height: 400px; margin: 0 auto"></div>

      </div>
    </div>
  </div>

  <div class="col-lg-4">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-bar-chart-o"></i> Positive Stats <span class="hideunhide"><i class="fa fa-compress"></i></span></h3>
      </div>
      <div class="panel-body">

        <div id="positiveChart" style="min-width: 290px; max-width: 600px; height: 400px; margin: 0 auto"></div>

      </div>
    </div>
  </div>

  <div class="col-lg-4">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-bar-chart-o"></i> Negative Stats <span class="hideunhide"><i class="fa fa-compress"></i></span></h3>
      </div>
      <div class="panel-body">

        <div id="negativeChart" style="min-width: 290px; max-width: 600px; height: 400px; margin: 0 auto"></div>

      </div>
    </div>
  </div>

</div>


<div class="row">

  <div class="col-lg-12">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-calendar"></i> Fixtures Analysis <span class="hideunhide"><i class="fa fa-compress"></i></span></h3>
      </div>
      <div class="panel-body">

        <div id="gwfs">
        </div>

      </div>
    </div>
  </div>

</div>


<div class="row">

  <div class="col-lg-6">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-ambulance"></i> Injuries <span class="hideunhide"><i class="fa fa-expand"></i></span></h3>
      </div>
      <div class="panel-body" style="display: none;">

        <div style="width:460; text-align:center; font-family:Verdana; font-size:11px;">
          <iframe src="http://www.physioroom.com/affiliate/common/syndicate_table2.php?w=470" width="460" height="1200" frameborder="0"></iframe>
          <p>Visit <a href="http://www.physioroom.com" rel="nofollow" target="_blank">PhysioRoom.com</a> for more injury information</p>
        </div>

      </div>
    </div>
  </div>

  <div class="col-lg-6">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-crosshairs"></i> Set Piece Takers <span class="hideunhide"><i class="fa fa-expand"></i></span></h3>
      </div>
      <div class="panel-body" style="display: none;">

        <table style="width:100%; " class="easy-table easy-table-default table table-bordered">
          <thead>
          <tr><th>Team</th>
          <th>Penalties</th>
          <th>Direct and Indirect Free Kicks</th>
          <th>Corners</th>
          </tr>
          </thead>
          <tbody>
          <tr><td class="ARS"><strong>Arsenal</strong></td>
          <td>Arteta, Giroud, Ozil</td>
          <td>Cazorla, Ozil, Walcott, Sanchez</td>
          <td>Cazorla, Ozil, Walcott, Sanchez</td>
          </tr>

          <tr><td class="AVL"><strong>Aston Villa</strong></td>
          <td>Benteke, Bacuna, Bent</td>
          <td>Bacuna, Westwood, N’Zogbia, Richardson</td>
          <td>Westwood, Bacuna, N’Zogbia, Grealish</td>
          </tr>

          <tr><td class="BUR"><strong>Burnley</strong></td>
          <td>Vokes, Ings</td>
          <td>Wallace, Trippier, Taylor, Jones</td>
          <td>Taylor, Jones, Wallace, Trippier</td>
          </tr>

          <tr><td class="CHE"><strong>Chelsea</strong></td>
          <td>Hazard, Costa, Fabregas, Drogba, Remy</td>
          <td>Hazard, Oscar, Willian</td>
          <td>Hazard, Fabregas, Oscar</td>
          </tr>

          <tr><td class="CRY"><strong>Crystal Palace</strong></td>
          <td>Chamakh, Murray, Jedinak, Puncheon</td>
          <td>Jedinak, Bolasie, Gayle</td>
          <td>Bannan, Puncheon, Bolasie</td>
          </tr>

          <tr><td class="EVE"><strong>Everton</strong></td>
          <td>Baines, Lukaku, Eto’o</td>
          <td>Baines, Barkley, Mirallas</td>
          <td>Mirallas, Baines, McGeady</td>
          </tr>

          <tr><td class="HUL"><strong>Hull City</strong></td>
          <td>Ben Arfa, Jelavic, Brady</td>
          <td>Ben Arfa, Ramirez, Brady, Huddlestone, Snodgrass</td>
          <td>Ben Arfa, Huddlestone, Brady</td>
          </tr>

          <tr><td class="LEI"><strong>Leicester</strong></td>
          <td>Nugent, Wood, Konchesky</td>
          <td>Knockaert, Mahrez, Drinkwater</td>
          <td>Knockaert, Drinkwater, Albrighton,  Mahrez</td>
          </tr>

          <tr><td class="LIV"><strong>Liverpool </strong></td>
          <td>Gerrard, Balotelli, Lambert, Sturridge</td>
          <td>Gerrard, Balotelli, Lambert, Coutinho</td>
          <td>Gerrard, Coutinho, Lallana</td>
          </tr>

          <tr><td class="MCI"><strong>Man City</strong></td>
          <td>Aguero, Yaya Toure, Kolarov</td>
          <td>Yaya Toure, Kolarov, Silva, Nasri</td>
          <td>Silva, Nasri, Navas</td>
          </tr>

          <tr><td class="MUN"><strong>Man Utd</strong></td>
          <td>Van Persie, Rooney, Falcao</td>
          <td>Van Persie, Rooney, Mata</td>
          <td>Van Persie, Rooney, Mata, Januzaj</td>
          </tr>

          <tr><td class="NEW"><strong>Newcastle </strong></td>
          <td>Cabella, De Jong</td>
          <td>De Jong, Gouffran, Tiote, Anita</td>
          <td>Cabella, Santon, Anita</td>
          </tr>

          <tr><td class="QPR"><strong>QPR</strong></td>
          <td>Austin, Barton</td>
          <td>Barton, Taarabt, Mutch</td>
          <td>Barton, Faurlin, Taarabt, Mutch</td>
          </tr>

          <tr><td class="SOU"><strong>Southampton</strong></td>
          <td>Tadic, Long, Davis, Pelle</td>
          <td>Tadic, Ward-Prowse, Davis</td>
          <td>Tadic, Ward-Prowse, Davis</td>
          </tr>

          <tr><td class="STK"><strong>Stoke City</strong></td>
          <td>Adam, Walters, Arnautovic</td>
          <td>Adam, Arnautovic, Ireland</td>
          <td>Adam, Ireland, Assaidi</td>
          </tr>

          <tr><td class="SUN"><strong>Sunderland</strong></td>
          <td>Wickham, Gomez, Fletcher</td>
          <td>Larsson, Johnson, Gomez</td>
          <td>Larsson, Johnson, Gomez</td>
          </tr>

          <tr><td class="SWA"><strong>Swansea</strong></td>
          <td>Bony, Gomis, Sigurdsson</td>
          <td>Sigurdsson, Shelvey, Ki</td>
          <td>Sigurdsson, Shelvey, Ki</td>
          </tr>

          <tr><td class="TOT"><strong>Tottenham</strong></td>
          <td>Soldado, Adebayor, Townsend</td>
          <td>Eriksen, Walker, Vertonghen</td>
          <td>Eriksen, Lamela, Walker</td>
          </tr>

          <tr><td class="WBA"><strong>West Brom</strong></td>
          <td>Berahino, Morrison, Brunt, Dorrans</td>
          <td>Brunt, Dorrans, Morrison</td>
          <td>Brunt, Dorrans, Morrison</td>
          </tr>

          <tr><td class="WHU"><strong>West Ham</strong></td>
          <td>Noble, Nolan, Carroll</td>
          <td>Jarvis, Noble, Downing</td>
          <td>Jarvis, Noble, Downing</td>
          </tr>
          </tbody>
        </table>

      </div>
    </div>
  </div>

  <div class="col-lg-6">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-twitter"></i> Latest Twitter Updates <span class="hideunhide"><i class="fa fa-compress"></i></span></h3>
      </div>
      <div class="panel-body">

        <a class="twitter-timeline" href="https://twitter.com/thefplassistant" data-widget-id="509810229450506240">
          Tweets by @thefplassistant
        </a>
        <script>
          !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");
        </script>

      </div>
    </div>
  </div>

  <div class="col-lg-6">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-trophy"></i> Standings <span class="hideunhide"><i class="fa fa-compress"></i></span></h3>
      </div>
      <div class="panel-body">
        <div style="text-align:center">
          <iframe src="http://www.tablesleague.com/iframe?width=520&height=400&font_name=Tahoma&position=1&font_size=12&team_link=1&link_color=FFFFFF&games=1&wins=1&draws=1&lost=1&goals=1&goals_against=1&gd=1&points=1&next=1&form=1&font_size=12&font_color=FFFFFF&bg_color=222222&header_font_color=222222&header_bg_color=222222&bg_col=222222&font_color_col=FFFFFF&highlight=333333&hover=222222&league_header=1&league=l_145&team="
                  style="display:block;width:100%" height="510" frameborder="0" scrolling="no">
          </iframe>
        </div>

      </div>
    </div>
  </div>

</div>

<div class="row">



  <div class="col-lg-6">
  </div>

</div>




<% content_for :css do %>
  <style>
    .ui-pg-input {width: auto !important; }
    .ui-jqgrid tr.jqgrow td {font-size:1.0em}
    .ui-jqgrid tr.ui-search-toolbar td.ui-search-oper {font-size:0.6em;}
    .ui-jqgrid tr.ui-search-toolbar td.ui-search-input input {width: 30px !important;}
    #wrapper { padding-left: 125px;}
    .side-nav { width: 125px; }
    #gs_next_fixture {width: auto !important;}
    #gs_current_fixture {width: auto !important;}
    #gs_summary {width: auto !important;}
    #gs_first_name  {width: auto !important;}
    #gs_second_name  {width: auto !important;}
    #gs_web_name  {width: auto !important;}
    #gs_news  {width: auto !important;}
    .searchFilter input {width:50px !important;}
    .ui-pg-selbox {
      width: auto !important;
      padding: 0 !important;
    }
    input{background-color: black;}
    .searchFilter select, input {
      width: auto !important;
    }

    .short_team_name{
      -webkit-border-radius: 99px;
      -moz-border-radius: 99px;
      border-radius: 99px;
      font-weight: bold;
      opacity: 0.75;
    }

    .next_team{
      display:inline-block;
      font-weight: bold;
      -webkit-border-radius: 99px 0px 0px 99px;
      -moz-border-radius: 99px 0px 0px 99px;
      border-radius: 99px 0px 0px 99px;
      width: 30px;
      margin-left: 5px;
      opacity: 0.75;
    }

    .next_at{
      display:inline-block;
      font-weight: bold;
      -webkit-border-radius: 0px 99px 99px 0px;
      -moz-border-radius: 0px 99px 99px 0px;
      border-radius: 0px 99px 99px 0px;
      width: 13px;
    }

    .status_div{
      display:inline-block;
      font-weight: bold;
    }

    .A{
      background-color:#8b0000;
    }
    .H{
      background-color:#517a00;
    }

    .table-hover tbody tr:hover td {
      background-color: #195f81;
    }

    .ARS{
      background-color:#c42222;
      color:#faf8f8;
    }
    .CRY{
      background-color:#5971b9;
    }
    .EVE{
      background-color:#0031a1;
      color:#f1d00e;
    }
    .LEI{
      background-color:#023b9d;
    }
    .TOT{
      background-color:#f5f5f5;
      color:#10214a;
    }
    .SOU{
      background-color:#ed1a3b;
    }
    .CHE{
      background-color:#001248;
    }
    .MCI{
      background-color:#8bb1d3;
      color:#faf8f8;
    }
    .MUN{
      background-color:#aa0619;
    }
    .LIV{
      background-color:#d00027;
      color:#f1d00e;
    }
    .SWA{
      background-color:#ffffff;
      color:#df0000;
    }
    .NEW{
      background-color:#231f20;
      color:#ffffff;
    }
    .QPR{
      background-color:#4487c1;
      color:#cecec8;
    }
    .STK{
      background-color:#ffffff;
      color:#e03a3e;
    }
    .SUN{
      background-color:#eb172b;
      color:#fef7f8;
    }
    .WHU{
      background-color:#791530;
      color:#eecf3a;
    }
    .AVL{
      background-color:#92bce7;
      color:#810f31;
    }
    .WBA{
      background-color:#fbfdf1;
      color:#091453;
    }
    .BUR{
      background-color:#84092e;
      color:#89d1f3;
    }
    .HUL{
      background-color:#f5a12d;
      color:#000000;
    }


    .ui-jqgrid tr.jqgrow td { height: 10px; padding-top: 0px;}

    .hideunhide{
      float:right;
    }

    .panel-heading{
      cursor:pointer;
    }

  </style>
  <link rel="stylesheet" type="text/css" href="http://www.ok-soft-gmbh.com/jqGrid/jquery.jqGrid-4.3.1/plugin/ui.multiselect.css" />
<% end %>

<% content_for :js do %>
  <script type="text/javascript">



  $(".panel-heading").click(function(){
    hideunhidebtn = $(this).children(".panel-title").children('.hideunhide');
    bod = $(this).next(".panel-body");
    if (hideunhidebtn.children().attr("class") == "fa fa-expand"){
      hideunhidebtn.children().attr("class","fa fa-compress");
      $(bod).show("blind");
    }else{
      hideunhidebtn.children().attr("class","fa fa-expand");
      $(bod).hide("blind");
    }
  });


  $.ajax({
    url: "/fixtures",
    cache: false,
    success: function(html){
      $("#gwfs").append(html);
    }
  });

  //Max and min values for column value coloring received from controllers
  var maxCost = <%= @vals.max_cost %>;
  var minCost = <%= @vals.min_cost %>;
  var maxTS = <%= @vals.max_ts > 0 ? @vals.max_ts : 1 %>;
  var minTS = <%= @vals.min_ts %>;
  var maxMins = <%= @vals.max_mins %>;
  var minMins = <%= @vals.min_mins %>;
  var maxForm = <%= @vals.max_form %>;
  var minForm = <%= @vals.min_form %>;
  var maxEAIndex = <%= @vals.max_ea_index %>;
  var minEAIndex = <%= @vals.min_ea_index %>;
  var maxBPS = <%= @vals.max_bps %>;
  var minBPS = <%= @vals.min_bps %>;
  var maxBonus = <%= @vals.max_bonus %>;
  var minBonus = <%= @vals.min_bonus %>;
  var maxSBP = <%= @vals.max_selected_by_percent %>;
  var minSBP = <%= @vals.min_selected_by_percent %>;

  var maxPM = <%= @vals.max_penalties_missed %>;
  var minPM = <%= @vals.min_penalties_missed %>;
  var maxPS = <%= @vals.max_penalties_saved %>;
  var minPS = <%= @vals.min_penalties_saved %>;
  var maxOG = <%= @vals.max_own_goals %>;
  var minOG = <%= @vals.min_own_goals %>;
  var maxCS = <%= @vals.max_clean_sheets %>;
  var minCS = <%= @vals.min_clean_sheets %>;
  var maxSaves = <%= @vals.max_saves %>;
  var minSaves = <%= @vals.min_saves %>;
  var maxGC = <%= @vals.max_goals_conceded %>;
  var minGC = <%= @vals.min_goals_conceded %>;
  var maxAssists = <%= @vals.max_assists %>;
  var minAssists = <%= @vals.min_assists %>;
  var maxGS = <%= @vals.max_goals_scored %>;
  var minGS = <%= @vals.min_goals_scored %>;
  var maxYC = <%= @vals.max_yellow_cards %>;
  var minYC = <%= @vals.min_yellow_cards %>;
  var maxRC = <%= @vals.max_red_cards %>;
  var minRC = <%= @vals.min_red_cards %>;
  var maxDC = <%= @vals.max_dreamteam_count > 0 ? @vals.max_dreamteam_count : 1%>;
  var minDC = <%= @vals.min_dreamteam_count %>;



    var short_teamname = {
      "Arsenal":"ARS",
      "Crystal Palace":"CRY",
      "Everton":"EVE",
      "Leicester":"LEI",
      "Spurs":"TOT",
      "Southampton":"SOU",
      "Chelsea":"CHE",
      "Man City":"MCI",
      "Man Utd":"MUN",
      "Liverpool":"LIV",
      "Swansea":"SWA",
      "Newcastle":"NEW",
      "QPR":"QPR",
      "Stoke":"STK",
      "Sunderland":"SUN",
      "West Ham":"WHU",
      "Aston Villa":"AVL",
      "West Brom":"WBA",
      "Burnley":"BUR",
      "Hull":"HUL"
    };

    var long_teamname = {
      "ARS" : "Arsenal",
      "CRY" : "Crystal Palace",
      "EVE" : "Everton",
      "LEI" : "Leicester",
      "TOT" : "Spurs",
      "SOU" : "Southampton",
      "CHE" : "Chelsea",
      "MCI" : "Man City",
      "MUN" : "Man Utd",
      "LIV" : "Liverpool",
      "SWA" : "Swansea",
      "NEW" : "Newcastle",
      "QPR" : "QPR",
      "STK" : "Stoke",
      "SUN" : "Sunderland",
      "WHU" : "West Ham",
      "AVL" : "Aston Villa",
      "WBA" : "West Brom",
      "BUR" : "Burnley",
      "HUL" : "Hull"
      };

    var position_short = {"Goalkeeper":"G", "Forward":"F", "Midfielder":"M", "Defender":"D"};
    var position_long = {"G":"Goalkeeper", "F":"Forward", "M":"Midfielder", "D":"Defender"};

    var statuses = {
      "a":"<i style='color:#77b300' class='fa fa-thumbs-up'></i>",
      "d":"<i style='color:#ff8800' class='fa fa-stethoscope'></i>",
      "i":"<i style='color:#cc0000' class='fa fa-ambulance'></i>",
      "n":"<i style='color:#cc0000' class='fa fa-suitcase'></i>",
      "s":"<i style='color:#cc0000' class='fa fa-ban'></i>"
      };


  //http://stackoverflow.com/questions/9687201/jqgrid-column-chooser-modal-overlay
  $.jgrid.extend({
    columnChooser : function(opts) {
        var self = this;
        if($("#colchooser_"+$.jgrid.jqID(self[0].p.id)).length ) { return; }
        var selector = $('<div id="colchooser_'+self[0].p.id+'" style="position:relative;overflow:hidden"><div><select multiple="multiple"></select></div></div>');
        var select = $('select', selector);

        function insert(perm,i,v) {
            if(i>=0){
                var a = perm.slice();
                var b = a.splice(i,Math.max(perm.length-i,i));
                if(i>perm.length) { i = perm.length; }
                a[i] = v;
                return a.concat(b);
            }
        }
        opts = $.extend({
            "width" : 420,
            "height" : 240,
            "classname" : null,
            "done" : function(perm) { if (perm) { self.jqGrid("remapColumns", perm, true); } },
            /* msel is either the name of a ui widget class that
               extends a multiselect, or a function that supports
               creating a multiselect object (with no argument,
               or when passed an object), and destroying it (when
               passed the string "destroy"). */
            "msel" : "multiselect",
            /* "msel_opts" : {}, */

            /* dlog is either the name of a ui widget class that
               behaves in a dialog-like way, or a function, that
               supports creating a dialog (when passed dlog_opts)
               or destroying a dialog (when passed the string
               "destroy")
               */
            "dlog" : "dialog",

            /* dlog_opts is either an option object to be passed
               to "dlog", or (more likely) a function that creates
               the options object.
               The default produces a suitable options object for
               ui.dialog */
            "dlog_opts" : function(opts) {
                var buttons = {};
                buttons[opts.bSubmit] = function() {
                    opts.apply_perm();
                    opts.cleanup(false);
                };
                buttons[opts.bCancel] = function() {
                    opts.cleanup(true);
                };
                return $.extend(true, {
                    "buttons": buttons,
                    "close": function() {
                        opts.cleanup(true);
                    },
                    "modal" : opts.modal ? opts.modal : false,
                    "resizable": opts.resizable ? opts.resizable : true,
                    "width": opts.width+20,
                    resize: function (e, ui) {
                        var $container = $(this).find('>div>div.ui-multiselect'),
                            containerWidth = $container.width(),
                            containerHeight = $container.height(),
                            $selectedContainer = $container.find('>div.selected'),
                            $availableContainer = $container.find('>div.available'),
                            $selectedActions = $selectedContainer.find('>div.actions'),
                            $availableActions = $availableContainer.find('>div.actions'),
                            $selectedList = $selectedContainer.find('>ul.connected-list'),
                            $availableList = $availableContainer.find('>ul.connected-list'),
                            dividerLocation = opts.msel_opts.dividerLocation || $.ui.multiselect.defaults.dividerLocation;

                        $container.width(containerWidth); // to fix width like 398.96px
                        $availableContainer.width(Math.floor(containerWidth*(1-dividerLocation)));
                        $selectedContainer.width(containerWidth - $availableContainer.outerWidth() - ($.browser.webkit ? 1: 0));

                        $availableContainer.height(containerHeight);
                        $selectedContainer.height(containerHeight);
                        $selectedList.height(Math.max(containerHeight-$selectedActions.outerHeight()-1,1));
                        $availableList.height(Math.max(containerHeight-$availableActions.outerHeight()-1,1));
                    }
                }, opts.dialog_opts || {});
            },
            /* Function to get the permutation array, and pass it to the
               "done" function */
            "apply_perm" : function() {
                $('option',select).each(function(i) {
                    if (this.selected) {
                        self.jqGrid("showCol", colModel[this.value].name);
                    } else {
                        self.jqGrid("hideCol", colModel[this.value].name);
                    }
                });

                var perm = [];
                //fixedCols.slice(0);
                $('option:selected',select).each(function() { perm.push(parseInt(this.value,10)); });
                $.each(perm, function() { delete colMap[colModel[parseInt(this,10)].name]; });
                $.each(colMap, function() {
                    var ti = parseInt(this,10);
                    perm = insert(perm,ti,ti);
                });
                if (opts.done) {
                    opts.done.call(self, perm);
                }
            },
            /* Function to cleanup the dialog, and select. Also calls the
               done function with no permutation (to indicate that the
               columnChooser was aborted */
            "cleanup" : function(calldone) {
                call(opts.dlog, selector, 'destroy');
                call(opts.msel, select, 'destroy');
                selector.remove();
                if (calldone && opts.done) {
                    opts.done.call(self);
                }
            },
            "msel_opts" : {}
        }, $.jgrid.col, opts || {});
        if($.ui) {
            if ($.ui.multiselect ) {
                if(opts.msel == "multiselect") {
                    if(!$.jgrid._multiselect) {
                        // should be in language file
                        alert("Multiselect plugin loaded after jqGrid. Please load the plugin before the jqGrid!");
                        return;
                    }
                    opts.msel_opts = $.extend($.ui.multiselect.defaults,opts.msel_opts);
                }
            }
        }
        if (opts.caption) {
            selector.attr("title", opts.caption);
        }
        if (opts.classname) {
            selector.addClass(opts.classname);
            select.addClass(opts.classname);
        }
        if (opts.width) {
            $(">div",selector).css({"width": opts.width,"margin":"0 auto"});
            select.css("width", opts.width);
        }
        if (opts.height) {
            $(">div",selector).css("height", opts.height);
            select.css("height", opts.height - 10);
        }
        var colModel = self.jqGrid("getGridParam", "colModel");
        var colNames = self.jqGrid("getGridParam", "colNames");
        var colMap = {}, fixedCols = [];

        select.empty();
        $.each(colModel, function(i) {
            colMap[this.name] = i;
            if (this.hidedlg) {
                if (!this.hidden) {
                    fixedCols.push(i);
                }
                return;
            }

            select.append("<option value='"+i+"' "+
                          (this.hidden?"":"selected='selected'")+">"+colNames[i]+"</option>");
        });
        function call(fn, obj) {
            if (!fn) { return; }
            if (typeof fn == 'string') {
                if ($.fn[fn]) {
                    $.fn[fn].apply(obj, $.makeArray(arguments).slice(2));
                }
            } else if ($.isFunction(fn)) {
                fn.apply(obj, $.makeArray(arguments).slice(2));
            }
        }

        var dopts = $.isFunction(opts.dlog_opts) ? opts.dlog_opts.call(self, opts) : opts.dlog_opts;
        call(opts.dlog, selector, dopts);
        var mopts = $.isFunction(opts.msel_opts) ? opts.msel_opts.call(self, opts) : opts.msel_opts;
        call(opts.msel, select, mopts);
        // fix height of elements of the multiselect widget
        var resizeSel = "#colchooser_"+$.jgrid.jqID(self[0].p.id),
            $container = $(resizeSel + '>div>div.ui-multiselect'),
            $selectedContainer = $(resizeSel + '>div>div.ui-multiselect>div.selected'),
            $availableContainer = $(resizeSel + '>div>div.ui-multiselect>div.available'),
            containerHeight,
            $selectedActions = $selectedContainer.find('>div.actions'),
            $availableActions = $availableContainer.find('>div.actions'),
            $selectedList = $selectedContainer.find('>ul.connected-list'),
            $availableList = $availableContainer.find('>ul.connected-list');
        $container.height($container.parent().height()); // increase the container height
        containerHeight = $container.height();
        $selectedContainer.height(containerHeight);
        $availableContainer.height(containerHeight);
        $selectedList.height(Math.max(containerHeight-$selectedActions.outerHeight()-1,1));
        $availableList.height(Math.max(containerHeight-$availableActions.outerHeight()-1,1));
    }
});


  $(function () {
      idsOfSelectedRows = [];
      firstLoaded = 0; //to ensure top3 are selected only on first loadComplete
      numberSearchOptions = ['eq', 'ne', 'le', 'ge', 'nu', 'nn'],
      numberTemplate = {formatter: 'number', align: 'right', sorttype: 'float', width: 50,
                        searchoptions: { sopt: numberSearchOptions }},
      IntTemplate = {formatter: 'integer', align: 'right', sorttype: 'integer', width: 50,
                        searchoptions: { sopt: numberSearchOptions }},

      $("#filterGrid").jqGrid({
          url: "/players.json",
          datatype: "json",
          colNames: ["Name", "Position",
           "Position_unformatted", "Team", "Team_unformatted", "Status",
           "Status_unformatted",
           "News", "&pound;", "cost_unformatted", "TS",
           "TS_unformatted", "F", "form_unformatted",
           "PPG", "TSB", "NF", "NF_unformatted", "MP", "MP_unformatted",
           "B", "B_unformatted","ESP", "ESP_unformatted", "BPS", "BPS_unformatted",
           "GS", "A","CS", "GC", "OG", "PS", "PM", "YC", "RC", "S", "DC",
           "Next 3 Fixtures", "Next 3 Fixtures_unformatted"
          ],
          colModel: [
            { name: "web_name", width: 100},
            { name: "type_name", width: 50, align: 'center', formatter: playerPositionFormatter,
             stype:'select',
             searchoptions:{sopt:['eq','ne'], value:":All;Goalkeeper:GK;Defender:DEF;Midfielder:MID;Forward:FWD"}
            },
            { name: "type_name_unformatted", jsonmap: "type_name", hidden:true, hidedlg: true},

            { name: "team_name", width: 50, align: 'center', formatter: teamNameFormatter,
              stype:'select',
              searchoptions:{sopt:['eq','ne'], value:":All;Arsenal:Arsenal;Aston Villa:Aston Villa;Leicester:Leicester;Chelsea:Chelsea;Crystal Palace:Crystal Palace;Everton:Everton;QPR:QPR;Hull:Hull;Liverpool:Liverpool;Man City:Man City;Man Utd:Man Utd;Newcastle:Newcastle;Burnley:Burnley;Southampton:Southampton;Stoke:Stoke;Sunderland:Sunderland;Swansea:Swansea;Spurs:Spurs;West Brom:West Brom;West Ham:West Ham"}
            },
            { name: "team_name_unformatted", jsonmap: "team_name", hidden:true, hidedlg: true},

            { name: "status", width: 50, align: 'center', formatter: statusFormatter,
              stype:'select',
                    searchoptions:{sopt:['eq','ne'], value:":All;a:Avaliable;d:Maybe Injured;i:Injured;n:On Loan;s:Suspended"},
                    cellattr: function (rowId, val, rawObject, cm, rdata) {
                      return 'title="' + rawObject.news  + '"';
                    }
            },
            { name: "status_unformatted", jsonmap: "status", hidden:true, hidedlg: true},

            { name: "news", hidden: true},

            { name: "now_cost_float", template: numberTemplate, formatter: costFormatter },
            { name: "now_cost_float_unformatted", template:numberTemplate, jsonmap: "now_cost_float", hidden:true, hidedlg: true },

            { name: "total_points", template: IntTemplate, formatter: TSFormatter },
            { name: "total_points_unformatted", template: IntTemplate, jsonmap: "total_points", hidden:true, hidedlg: true },

            { name: "form", template: numberTemplate,
                     formatter: formFormatter},
            { name: "form_unformatted", template: numberTemplate, hidden: true,
                    'editrules': {edithidden: true}, formatter: formFormatter,
                    jsonmap: "form", hidden:true, hidedlg: true},

            { name: "points_per_game", template: numberTemplate, hidden: true, 'editrules': {edithidden: true}},
            { name: "selected_by", template: numberTemplate, hidden:true},

            { name: "next_fixture", width:50, align:'center', formatter: nextFixtureFormatter, hidden:true },
            { name: "next_fixture_unformatted", jsonmap: "next_fixture", hidden:true, hidedlg: true},

            { name: "minutes", template: IntTemplate, formatter:minsFormatter },
            { name: "minutes_unformatted", template: IntTemplate,
                    jsonmap: "minutes", hidden:true, hidedlg: true},

            { name: "bonus", template: IntTemplate, formatter:bonusFormatter },
            { name: "bonus_unformatted", template: IntTemplate,
                    jsonmap: "bonus", hidden:true, hidedlg: true},

            { name: "ea_index", template: IntTemplate, formatter: EAIndexFormatter},
            { name: "ea_index_unformatted", template: IntTemplate,
                    jsonmap: "ea_index", hidden:true, hidedlg: true},

            { name: "bps", template: IntTemplate, formatter: BPSFormatter},
            { name: "bps_unformatted", template: IntTemplate,
                    jsonmap: "bps", hidden:true, hidedlg: true},

            { name: "goals_scored", template: IntTemplate, hidden:true },
            { name: "assists", template: IntTemplate, hidden: true },
            { name: "clean_sheets", template: IntTemplate, hidden:true },
            { name: "goals_conceded", template: IntTemplate, hidden:true },
            { name: "own_goals", template: IntTemplate, hidden:true },
            { name: "penalties_saved", template: IntTemplate, hidden:true },
            { name: "penalties_missed", template: IntTemplate, hidden:true },
            { name: "yellow_cards", template: IntTemplate, hidden:true },
            { name: "red_cards", template: IntTemplate, hidden:true },
            { name: "saves", template: IntTemplate, hidden:true },
            { name: "dreamteam_count", template: IntTemplate, hidden:true },

            { name: "summary", align:'center', width:150, formatter:summaryFormatter, search:false},
            { name: "summary_unformatted", jsonmap: "summary", hidden:true, hidedlg: true}

          ],
          toppager:true,
          rownumbers: true,
          height: 'auto',
          pager: "#pager",
          rowNum: 20,
          rowList: [10, 20, 30],
          sortname: "total_points",
          sortorder: "desc",
          viewrecords: true,
          gridview: true,
          autoencode: true,
          loadonce: true,
          ignoreCase: true,
          sortable: true,
          searchOperators: true,
          multiselect: true,
          //http://stackoverflow.com/questions/8172186/jqgrid-saving-checkbox-selected-state
          onSelectRow: function (id, isSelected) {
              var p = this.p, item = p.data[p._index[id]], i = $.inArray(id, idsOfSelectedRows);
              item.cb = isSelected;
              if (!isSelected && i >= 0) {
                  idsOfSelectedRows.splice(i,1); // remove id from the list
              } else if (i < 0) {
                  idsOfSelectedRows.push(id);
              }
          },
          loadComplete: function () {
              var p = this.p, data = p.data, item, $this = $(this), index = p._index, rowid, i, selCount;
              for (var i = 0, selCount = idsOfSelectedRows.length; i < selCount; i++) {
                  rowid = idsOfSelectedRows[i];
                  item = data[index[rowid]];
                  if ('cb' in item && item.cb) {
                      $this.jqGrid('setSelection', rowid, false);
                  }
              }


              //prepopulate the shortlist with top3 players only the first loadComplete
              if (firstLoaded != 1){
                for(var i=0;i<3;i++){
                  $("#filterGrid").setSelection($("#filterGrid").getDataIDs()[i]);
                }
                $("#getSelected").click();
                firstLoaded = 1;
              }

          },
          caption: ""
      });

      //Hiding the select-all checkbox
      $("#cb_"+$("#filterGrid")[0].id).hide();

      jQuery("#filterGrid").jqGrid('filterToolbar',{searchOperators : true});

      //For docs on options set, refer: http://www.trirand.com/jqgridwiki/doku.php?id=wiki:singe_searching#options
      jQuery("#filterGrid").jqGrid('navGrid','#pager',{
        del:false, add:false, edit:false, cloneToTop:true, refreshtext:'Reset',
         searchtext:'Query'},{},{},{},{
           multipleSearch:true,
           width: 600,
           closeAfterSearch: true,
           top: 300,
           left: 100,
           searchOnEnter: true
         }
       );

    $.extend(true, $.ui.multiselect, {
    locale: {
        addAll: 'Make all visible',
        removeAll: 'Hide All',
        itemsCount: 'Avlialble Columns'
      }
    });


    $.extend(true, $.jgrid.col, {
      width: 470,
      modal: true,
      msel_opts: {dividerLocation: 0.5},
      dialog_opts: {
          minWidth: 470,
          show: 'fade',
          hide: 'fade'
      }
    });

  jQuery("#filterGrid").jqGrid('navButtonAdd', '#pager', {
      caption: "Show/hide columns",
      buttonicon: "ui-icon-calculator",
      title: "Choose columns",
      onClickButton: function () {
          $(this).jqGrid('columnChooser');
      }
  });

  jQuery("#filterGrid").jqGrid('navButtonAdd', '#filterGrid_toppager', {
      caption: "Show/hide columns",
      buttonicon: "ui-icon-calculator",
      title: "Choose columns",
      onClickButton: function () {
          $(this).jqGrid('columnChooser');
      }
  });


// ****************************************************************************
// ****************************************************************************
// ****************************************************************************
// ****************************************************************************
// **************************** START SHORTLIST GRID **************************
// ****************************************************************************
// ****************************************************************************
// ****************************************************************************
// ****************************************************************************
// ****************************************************************************



      $("#shortlistGrid").jqGrid({
          datatype: "local",
          colNames: ["Name", "Position", "Team", "Status",
           "News", "&pound;", "F", "TS", "PPG", "TSB", "NF", "MP","B", "ESP","BPS",
           "GS", "A","CS", "GC", "OG", "PS", "PM", "YC", "RC", "S", "DC", "Next 3 Fixtures"
          ],
          colModel: [
            { name: "web_name", width: 100},
            { name: "type_name", width: 50, align: 'center', formatter: playerPositionFormatter,
             stype:'select',
             searchoptions:{sopt:['eq','ne'], value:":All;Goalkeeper:GK;Defender:DEF;Midfielder:MID;Forward:FWD"}
            },
            { name: "team_name", width: 50, align: 'center', formatter: teamNameFormatter,
             stype:'select',
             searchoptions:{sopt:['eq','ne'], value:":All;Arsenal:Arsenal;Aston Villa:Aston Villa;Leicester:Leicester;Chelsea:Chelsea;Crystal Palace:Crystal Palace;Everton:Everton;QPR:QPR;Hull:Hull;Liverpool:Liverpool;Man City:Man City;Man Utd:Man Utd;Newcastle:Newcastle;Burnley:Burnley;Southampton:Southampton;Stoke:Stoke;Sunderland:Sunderland;Swansea:Swansea;Spurs:Spurs;West Brom:West Brom;West Ham:West Ham"}
            },
            { name: "status", width: 50, align: 'center', formatter: statusFormatter,
              stype:'select',
                    searchoptions:{sopt:['eq','ne'], value:":All;a:Avaliable;d:Maybe Injured;i:Injured;n:On Loan;s:Suspended"},
                    cellattr: function (rowId, val, rawObject, cm, rdata) {
                      return 'title="' + rawObject.news  + '"';
                    }
            },
            { name: "news", hidden: true},
            { name: "now_cost_float", template: numberTemplate,
              formatter:costFormatter},
            { name: "form", template: numberTemplate, 'editrules': {edithidden: true},
              formatter: formFormatter},
            { name: "total_points", template: IntTemplate,
              formatter:TSFormatter},
            { name: "points_per_game", template: numberTemplate, hidden: true, 'editrules': {edithidden: true}},
            { name: "selected_by", template: numberTemplate, hidden:true},
            { name: "next_fixture_unformatted", width:50, align:'center', formatter: nextFixtureFormatter, hidden:true },
            { name: "minutes", template: IntTemplate, formatter:minsFormatter  },
            { name: "bonus_unformatted", template: IntTemplate, formatter:bonusFormatter  },
            { name: "ea_index", template: IntTemplate, formatter:EAIndexFormatter },
            { name: "bps", template: IntTemplate, formatter:BPSFormatter },
            { name: "goals_scored", template: IntTemplate, hidden:true },
            { name: "assists", template: IntTemplate, hidden:true },
            { name: "clean_sheets", template: IntTemplate, hidden:true },
            { name: "goals_conceded", template: IntTemplate, hidden:true },
            { name: "own_goals", template: IntTemplate, hidden:true },
            { name: "penalties_saved", template: IntTemplate, hidden:true },
            { name: "penalties_missed", template: IntTemplate, hidden:true },
            { name: "yellow_cards", template: IntTemplate, hidden:true },
            { name: "red_cards", template: IntTemplate, hidden:true },
            { name: "saves", template: IntTemplate, hidden:true },
            { name: "dreamteam_count", template: IntTemplate, hidden:true },
            { name: "summary_unformatted", align:'center', width:150, formatter:summaryFormatter, search:false}
          ],
          toppager:true,
          rownumbers: true,
          height: 'auto',
          pager: "#shortlistGrid_pager",
          rowNum: 10,
          rowList: [10, 20, 30],
          sortname: "total_points",
          sortorder: "desc",
          viewrecords: true,
          gridview: true,
          autoencode: true,
          loadonce: true,
          ignoreCase: true,
          sortable: true,
          searchOperators: true,
          caption: ""
      });

      jQuery("#shortlistGrid").jqGrid('filterToolbar',{searchOperators : true});

      //For docs on options set, refer: http://www.trirand.com/jqgridwiki/doku.php?id=wiki:singe_searching#options
      jQuery("#shortlistGrid").jqGrid('navGrid','#shortlistGrid_pager2',{
        del:false, add:false, edit:false, cloneToTop:true, refreshtext:'Reset',
         searchtext:'Query'},{},{},{},{
           multipleSearch:true,
           width: 600,
           closeAfterSearch: true,
           top: 300,
           left: 100,
           searchOnEnter: true
         }
       );

    $.extend(true, $.ui.multiselect, {
    locale: {
        addAll: 'Make all visible',
        removeAll: 'Hide All',
        itemsCount: 'Avlialble Columns'
      }
    });


    $.extend(true, $.jgrid.col, {
      width: 470,
      modal: true,
      msel_opts: {dividerLocation: 0.5},
      dialog_opts: {
          minWidth: 470,
          show: 'fade',
          hide: 'fade'
      }
    });

  jQuery("#shortlistGrid").jqGrid('navButtonAdd', '#shortlistGrid_pager', {
      caption: "Show/hide columns",
      buttonicon: "ui-icon-calculator",
      title: "Choose columns",
      onClickButton: function () {
          $(this).jqGrid('columnChooser');
      }
  });

  jQuery("#shortlistGrid").jqGrid('navButtonAdd', '#shortlistGrid_toppager', {
      caption: "Show/hide columns",
      buttonicon: "ui-icon-calculator",
      title: "Choose columns",
      onClickButton: function () {
          $(this).jqGrid('columnChooser');
      }
  });

  //On button-click clear all selection from filterGrid and empty shortlist-Grid
  $("#clearShortlist").click(function(){
    $("#filterGrid").jqGrid('resetSelection');
    idsOfSelectedRows = [];
    $("#getSelected").click();
  });

  //On button-click move selected rows from filterGrid to shortlist-Grid
  $("#getSelected").click(function(){
      var shortlisted = [];
      //pull data from filterGrid
      for (var i=0, il=idsOfSelectedRows.length; i < il; i++) {
          shortlisted.push($("#filterGrid").jqGrid('getLocalRow', idsOfSelectedRows[i]));
      }

      //clear data in shortlist
      $('#shortlistGrid').jqGrid('clearGridData');


      var hcData = [];
      var positiveChartData = [];
      var negativeChartData = [];
      //push data to shortlist-grid
      for(var i=0; i<shortlisted.length; i++){
        $("#shortlistGrid").jqGrid('addRowData',i+1,shortlisted[i]);

        var hdat = [shortlisted[i].total_points*100/maxTS, //Points
                    shortlisted[i].form*100/maxForm, //Form
                    shortlisted[i].minutes*100/maxMins, //Minutes Played
                    shortlisted[i].bonus*100/maxBonus, //Bonus Points Scored
                    shortlisted[i].ea_index*100/maxEAIndex, //EA Sports PPI
                    shortlisted[i].bps*100/maxBPS  //Bonus Points System
                    ];

        hcData.push({name: shortlisted[i].web_name,
                      data: hdat,
                      pointPlacement: 'on'
                    });

        var hdat = [shortlisted[i].penalties_saved*100/maxPS, //Penalties Saved
                    shortlisted[i].clean_sheets*100/maxCS, //Clean Sheets
                    shortlisted[i].dreamteam_count*100/maxDC,  //Dreamteam Count
                    shortlisted[i].goals_scored*100/maxGS, //Goals Scored
                    shortlisted[i].assists*100/maxAssists, //Assists
                    shortlisted[i].saves*100/maxSaves //Saves
                    ];

        positiveChartData.push({name: shortlisted[i].web_name,
                      data: hdat,
                      pointPlacement: 'on'
                    });

        var hdat = [shortlisted[i].now_cost_float*1000/maxCost, //Cost
                    shortlisted[i].penalties_missed*100/maxPM, //Penalties Missed
                    shortlisted[i].own_goals*100/maxOG, //Own Goals
                    shortlisted[i].goals_conceded*100/maxGC, //Goals Conceded
                    shortlisted[i].yellow_cards*100/maxYC, //Yellows
                    shortlisted[i].red_cards*100/maxRC  //Reds
                    ];

        negativeChartData.push({name: shortlisted[i].web_name,
                      data: hdat,
                      pointPlacement: 'on'
                    });



      }


      //TODO: Refactor. put in function and supply data as arg
      $(function () {

        $('#container').highcharts({

            chart: {
                polar: true,
                type: 'line'
            },

            title: {
                text: 'Performance Stats',
                x: -80
            },

            pane: {
                size: '80%'
            },

            xAxis: {
                categories: ['Points', 'Form', 'Minutes Played', 'Bonus Points Scored',
                        'EA Sports PPI', 'Bonus Points System'],
                tickmarkPlacement: 'on',
                lineWidth: 0
            },

            yAxis: {
                gridLineInterpolation: 'polygon',
                lineWidth: 0,
                min: 0
            },

            tooltip: {
                shared: true,
                pointFormat: '<span style="color:{series.color}">{series.name}: <b>{point.y:,.0f}%</b><br/>'
            },

            legend: {
                align: 'right',
                verticalAlign: 'top',
                y: 70,
                layout: 'vertical'
            },

            series: hcData

        });
      });


      //TODO: Refactor. put in function and supply data as arg
      $(function () {

        $('#negativeChart').highcharts({

            chart: {
                polar: true,
                type: 'line'
            },

            title: {
                text: 'Lower is better',
                x: -80
            },

            pane: {
                size: '80%'
            },

            xAxis: {
                categories: ['Cost', 'Penalties Missed', 'Own Goals',
                'Goals Conceded', 'Yellow Cards', 'Red Cards'],
                tickmarkPlacement: 'on',
                lineWidth: 0
            },

            yAxis: {
                gridLineInterpolation: 'polygon',
                lineWidth: 0,
                min: 0
            },

            tooltip: {
                shared: true,
                pointFormat: '<span style="color:{series.color}">{series.name}: <b>{point.y:,.0f}%</b><br/>'
            },

            legend: {
                align: 'right',
                verticalAlign: 'top',
                y: 70,
                layout: 'vertical'
            },

            series: negativeChartData

        });
      });





      //TODO: Refactor. put in function and supply data as arg
      $(function () {

        $('#positiveChart').highcharts({

            chart: {
                polar: true,
                type: 'line'
            },

            title: {
                text: 'Higher is better',
                x: -80
            },

            pane: {
                size: '80%'
            },

            xAxis: {
                categories: ['Penalties Saved', 'Clean Sheets', 'Dreamteam Count',
                 'Goals Scored', 'Assists', 'Saves'],
                tickmarkPlacement: 'on',
                lineWidth: 0
            },

            yAxis: {
                gridLineInterpolation: 'polygon',
                lineWidth: 0,
                min: 0
            },

            tooltip: {
                shared: true,
                pointFormat: '<span style="color:{series.color}">{series.name}: <b>{point.y:,.0f}%</b><br/>'
            },

            legend: {
                align: 'right',
                verticalAlign: 'top',
                y: 70,
                layout: 'vertical'
            },

            series: positiveChartData

        });
      });


    }
  );


// ****************************************************************************
// ****************************************************************************
// ****************************************************************************
// ****************************************************************************
// **************************** END SHORTLIST GRID **************************
// ****************************************************************************
// ****************************************************************************
// ****************************************************************************
// ****************************************************************************
// ****************************************************************************


  function playerPicFormatter(cellvalue, options, rowObject)
  {
    var html = "<img src='http://cdn.ismfg.net/static/plfpl/img/shirts/photos/"+cellvalue+"'/>";
    return html;
  }

  function statusFormatter(cellvalue, options, rowObject){
    return statuses[cellvalue];
  }

  function nextFixtureFormatter(cellvalue, options, rowObject){
    var tmp = cellvalue.split(' (');
    var html = short_teamname[tmp[0]] + "-" + tmp[1][0];
    return html;
  }


  function teamNameFormatter(cellvalue, options, rowObject){
      var name = short_teamname[cellvalue];
      return "<div class='short_team_name "+name+"'>"+name+"</div>";
  }

  function playerPositionFormatter(cellvalue, options, rowObject){
    return position_short[cellvalue];
  }

  function summaryFormatter(cellvalue, options, rowObject){
    var fixs = cellvalue.split(', ');
    var html = "<div style='overflow:auto; width:150px'>";
    for(i=0; i< fixs.length; i++){
      var fix = fixs[i].split('-');
      var tm = fix[0];
      var at = fix[1];

      html += "<div class='next_team "+tm+"'>"+tm+"</div>";
      html += "<div class='next_at "+at+" '>"+at+"</div>";
    }
    html += "</div>"
    return html;
  }

  function rgbify(maxval, minval, val, moreisgood) {
      var intnsty = (val - minval) / (maxval - minval);
      var r, g;
      if (moreisgood) {
          if (intnsty > 0.5) {
              g = 255;
              r = Math.round(2 * (1 - intnsty) * 255);
          } else {
              r = 255;
              g = Math.round(2 * intnsty * 255);
          }

      } else { //lessisgood
          if (intnsty > 0.5) {
              r = 255;
              g = Math.round(2 * (1 - intnsty) * 255);
          } else {
              g = 255;
              r = Math.round(2 * intnsty * 255);
          }
      }
      return "rgb(" + r.toString() + ", " + g.toString() + ", 0)";
  }

  function costFormatter(cellvalue, options, rowObject){
    var maxval = maxCost;
    var minval = minCost;

    var styl = rgbify(maxval, minval, parseFloat(cellvalue)*10, false);

    var html = "<div class='status_div' style='color:"+styl+"'>";
    html += "<i class='fa fa-gbp'></i> "+cellvalue;
    html += "</div>"
    return html;
  }

  function TSFormatter(cellvalue, options, rowObject){
    var maxval = maxTS;
    var minval = minTS;

    var styl = rgbify(maxval, minval, cellvalue, true);

    var html = "<div class='status_div' style='color:"+styl+"'>";
    html += cellvalue;
    html += "</div>"
    return html;
  }

  function minsFormatter(cellvalue, options, rowObject){
    var maxval = maxMins;
    var minval = minMins;

    var styl = rgbify(maxval, minval, cellvalue, true);

    var html = "<div class='status_div' style='color:"+styl+"'>";
    html += cellvalue;
    html += "</div>"
    return html;
  }

  function formFormatter(cellvalue, options, rowObject){
    var maxval = maxForm;
    var minval = minForm;

    var styl = rgbify(maxval, minval, cellvalue, true);

    var html = "<div class='status_div' style='color:"+styl+"'>";
    html += cellvalue;
    html += "</div>"
    return html;
  }

  function EAIndexFormatter(cellvalue, options, rowObject){
    var maxval = maxEAIndex;
    var minval = minEAIndex;

    var styl = rgbify(maxval, minval, cellvalue, true);

    var html = "<div class='status_div' style='color:"+styl+"'>";
    html += cellvalue;
    html += "</div>"
    return html;
  }

  function BPSFormatter(cellvalue, options, rowObject){
    var maxval = maxBPS;
    var minval = minBPS;

    var styl = rgbify(maxval, minval, cellvalue, true);

    var html = "<div class='status_div' style='color:"+styl+"'>";
    html += cellvalue;
    html += "</div>"
    return html;
  }

  function bonusFormatter(cellvalue, options, rowObject){
    var maxval = maxBonus;
    var minval = minBonus;

    var styl = rgbify(maxval, minval, cellvalue, true);

    var html = "<div class='status_div' style='color:"+styl+"'>";
    html += cellvalue;
    html += "</div>"
    return html;
  }

  function SBPFormatter(cellvalue, options, rowObject){
    var maxval = maxSBP;
    var minval = minSBP;

    var styl = rgbify(maxval, minval, cellvalue, true);

    var html = "<div class='status_div' style='color:"+styl+"'>";
    html += cellvalue;
    html += "</div>"
    return html;
  }

});

  </script>


  <script>
    /*
    *******************************************************************************************
    *******************************************************************************************
    *******************************************************************************************
    ********************************* START CHARTS ********************************************
    *******************************************************************************************
    *******************************************************************************************
    *******************************************************************************************
    */
  $(function () {

    $('#container').highcharts({

        chart: {
            polar: true,
            type: 'line'
        },

        title: {
            text: 'Comparison with maximum values',
            x: -80
        },

        pane: {
            size: '80%'
        },

        xAxis: {
            categories: ['Points', 'Form', 'Minutes Played', 'Bonus Points Scored',
                    'EA Sports PPI', 'Bonus Points System'],
            tickmarkPlacement: 'on',
            lineWidth: 0
        },

        yAxis: {
            gridLineInterpolation: 'polygon',
            lineWidth: 0,
            min: 0
        },

        tooltip: {
            shared: true,
            pointFormat: '<span style="color:{series.color}">{series.name}: <b>${point.y:,.0f}</b><br/>'
        },

        legend: {
            align: 'right',
            verticalAlign: 'top',
            y: 70,
            layout: 'vertical'
        },

        series: []

    });
  });

    /**
   * Dark theme for Highcharts JS
   * @author Torstein Honsi
   */

  // Load the fonts
  Highcharts.createElement('link', {
     href: 'http://fonts.googleapis.com/css?family=Unica+One',
     rel: 'stylesheet',
     type: 'text/css'
  }, null, document.getElementsByTagName('head')[0]);

  Highcharts.theme = {
     colors: ["#2b908f", "#90ee7e", "#f45b5b", "#7798BF", "#aaeeee", "#ff0066", "#eeaaee",
        "#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],
     chart: {
        backgroundColor: "#222222",
        style: {
           fontFamily: "'Unica One', sans-serif"
        },
        plotBorderColor: '#606063'
     },
     title: {
        style: {
           color: '#E0E0E3',
           textTransform: 'uppercase',
           fontSize: '20px'
        }
     },
     subtitle: {
        style: {
           color: '#E0E0E3',
           textTransform: 'uppercase'
        }
     },
     xAxis: {
        gridLineColor: '#707073',
        labels: {
           style: {
              color: '#E0E0E3'
           }
        },
        lineColor: '#707073',
        minorGridLineColor: '#505053',
        tickColor: '#707073',
        title: {
           style: {
              color: '#A0A0A3'

           }
        }
     },
     yAxis: {
        gridLineColor: '#707073',
        labels: {
           style: {
              color: '#E0E0E3'
           }
        },
        lineColor: '#707073',
        minorGridLineColor: '#505053',
        tickColor: '#707073',
        tickWidth: 1,
        title: {
           style: {
              color: '#A0A0A3'
           }
        }
     },
     tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.85)',
        style: {
           color: '#F0F0F0'
        }
     },
     plotOptions: {
        series: {
           dataLabels: {
              color: '#B0B0B3'
           },
           marker: {
              lineColor: '#333'
           }
        },
        boxplot: {
           fillColor: '#505053'
        },
        candlestick: {
           lineColor: 'white'
        },
        errorbar: {
           color: 'white'
        }
     },
     legend: {
        itemStyle: {
           color: '#E0E0E3'
        },
        itemHoverStyle: {
           color: '#FFF'
        },
        itemHiddenStyle: {
           color: '#606063'
        }
     },
     credits: {
        style: {
           color: '#666'
        }
     },
     labels: {
        style: {
           color: '#707073'
        }
     },

     drilldown: {
        activeAxisLabelStyle: {
           color: '#F0F0F3'
        },
        activeDataLabelStyle: {
           color: '#F0F0F3'
        }
     },

     navigation: {
        buttonOptions: {
           symbolStroke: '#DDDDDD',
           theme: {
              fill: '#505053'
           }
        }
     },

     // scroll charts
     rangeSelector: {
        buttonTheme: {
           fill: '#505053',
           stroke: '#000000',
           style: {
              color: '#CCC'
           },
           states: {
              hover: {
                 fill: '#707073',
                 stroke: '#000000',
                 style: {
                    color: 'white'
                 }
              },
              select: {
                 fill: '#000003',
                 stroke: '#000000',
                 style: {
                    color: 'white'
                 }
              }
           }
        },
        inputBoxBorderColor: '#505053',
        inputStyle: {
           backgroundColor: '#333',
           color: 'silver'
        },
        labelStyle: {
           color: 'silver'
        }
     },

     navigator: {
        handles: {
           backgroundColor: '#666',
           borderColor: '#AAA'
        },
        outlineColor: '#CCC',
        maskFill: 'rgba(255,255,255,0.1)',
        series: {
           color: '#7798BF',
           lineColor: '#A6C7ED'
        },
        xAxis: {
           gridLineColor: '#505053'
        }
     },

     scrollbar: {
        barBackgroundColor: '#808083',
        barBorderColor: '#808083',
        buttonArrowColor: '#CCC',
        buttonBackgroundColor: '#606063',
        buttonBorderColor: '#606063',
        rifleColor: '#FFF',
        trackBackgroundColor: '#404043',
        trackBorderColor: '#404043'
     },

     // special colors for some of the
     legendBackgroundColor: 'rgba(0, 0, 0, 0.5)',
     background2: '#505053',
     dataLabelsColor: '#B0B0B3',
     textColor: '#C0C0C0',
     contrastTextColor: '#F0F0F3',
     maskColor: 'rgba(255,255,255,0.3)'
  };

  // Apply the theme
  Highcharts.setOptions(Highcharts.theme);
  </script>
<% end %>
